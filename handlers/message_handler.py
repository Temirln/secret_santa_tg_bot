"""
Created By: Temirlan
"""

import re

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hcode, hlink,hitalic

from db.crud.event import get_receiver_event, arrange_all_giver_receiver
from db.crud.wishlist import add_user_wish, get_user_wishes
from db.crud.participants import get_chat_participants
from db.db import async_session_maker
from keyboards.inline_k import create_inline_wish_buttons, get_inline_wishes_list
from keyboards.reply_k import (
    get_reply_wish_list_markup,
    get_reply_wish_next_step_markup,
)
from utils.decorators import check_private
from utils.stateforms import StepsForm
from utils.shuffle_user import arrange_secret_santa 


async def echo_handler(message: Message, bot: Bot) -> None:
    print("GIF:",message.animation)
    print("GROUP:", message.chat.type)
    print("GROUP_ID:", message.chat.id)

    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.answer("Nice try!")


@check_private
async def get_wish_title(message: Message, state: FSMContext, *args, **kwargs):
    if message.text.title().strip() == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –î–µ–π—Å—Ç–≤–∏–µ ‚è≠":
        await message.answer(text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
        return

    await state.update_data(title=message.text)
    await state.set_state(StepsForm.GET_wish_short_description)
    await message.answer(
        text=f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞\n\n–ì–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å.\n–ö –ø—Ä–∏–º–µ—Ä—É: \n\n{hcode('–Ø —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π —à–∞—Ä —Å –µ–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –∏ ...')}",
        reply_markup=get_reply_wish_next_step_markup(),
    )


@check_private
async def get_wish_short_description(
    message: Message, state: FSMContext, *args, **kwargs
):
    if message.text.strip().title() != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –î–µ–π—Å—Ç–≤–∏–µ ‚è≠":
        await state.update_data(desc=message.text)

    await state.set_state(StepsForm.GET_wish_link)
    await message.answer(
        text=f"–ï—Å–ª–∏ —ç—Ç–æ –≤–µ—â—å —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å {hbold('C—Å—ã–ª–∫—É')} –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ —á—Ç–æ–±—ã —Ç–≤–æ–π C–∞–Ω—Ç–∞ –≤–∑—è–ª –µ–≥–æ —Ç–µ–±–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞–∫ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å:"
    )


@check_private
async def get_wish_link(message: Message, bot: Bot, state: FSMContext, *args, **kwargs):
    if message.text.strip().title() != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –î–µ–π—Å—Ç–≤–∏–µ ‚è≠":
        # state.set_state(StepsForm.FINISH_wish)
        url_pattern = re.compile(
            r"(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})"
        )
        wish_link = message.text
        print(url_pattern.search(wish_link))
        if not url_pattern.search(wish_link):
            await message.reply(text="–¢—ã –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Å—Å—ã–ª–∫—É")
            return

        await state.update_data(link=wish_link)

    context_data = await state.get_data()
    title = context_data.get("title")
    desc = context_data.get("desc")
    link = context_data.get("link")
    wish_data = {"title": title, "desc": desc, "link": link}

    await add_user_wish(async_session_maker, message.from_user.id, wish_data)

    wish_data = (
        f"–Ø –∑–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞\r\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {hbold(title)}\n"
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {desc if desc else "‚Äî"}\n\n'
        f'–°—Å—ã–ª–∫–∞: {hlink(title="–ü–æ–¥–∞—Ä–æ–∫",url=link) if link else "‚Äî"}\n'
    )

    event = await get_receiver_event(async_session_maker, message.from_user.id)
    if event:
        wishes = await get_user_wishes(async_session_maker, message.from_user.id)
        wishes_text = "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å —Å–≤–æ–µ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é"
        for index, wish in enumerate(wishes):
            if wish.is_gift_received:
                continue

            wishes_text += (
                f"\n{index+1})\t–ù–∞–∑–≤–∞–Ω–∏–µ  : {wish.title}\n"
                f"{' ' * (4 if index+1 < 10 else 6)}–û–ø–∏—Å–∞–Ω–∏–µ : {wish.description if wish.description else '‚Äî'}\n"
            )
        for e in event:
            if e.is_gift_ready:
                continue

            await bot.send_message(
                e.tg_santa_id, text="–í–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
            )
            await bot.send_message(
                e.tg_santa_id,
                text=wishes_text,
                parse_mode="html",
                reply_markup=create_inline_wish_buttons(wishes),
            )
        await message.answer(
            text="–Ø –æ–ø–æ–≤–µ—Å—Ç–∏–ª —Ç–≤–æ–∏—Ö –°–∞–Ω—Ç –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ —á—Ç–æ —Ç—ã –æ–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
        )
    else:
        await message.answer(
            text="–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–≤–æ–π –õ–∏—Å—Ç –ñ–µ–ª–∞–Ω–∏–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–≤–æ–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ"
        )

    await message.answer(
        text=wish_data,
        disable_web_page_preview=True,
        reply_markup=get_reply_wish_list_markup(),
    )
    await state.clear()


@check_private
async def message_add_wish_handler(
    message: Message, state: FSMContext, *args, **kwargs
):
    await message.answer(
        text="üéÅ–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µüéÅ\n\n–ï—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ —Å–ª—É—á–∞–π–Ω–æ —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π \n/cancel\n\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:"
    )
    await state.set_state(StepsForm.GET_wish_title)


# @check_private
async def message_delete_wish_handler(message: Message, *args, **kwargs):
    gifts = await get_user_wishes(async_session_maker, message.from_user.id)
    if len(gifts) == 0:
        await message.answer("–¢–≤–æ–π –°–ø–∏—Å–æ–∫ –ñ–µ–ª–∞–Ω–∏–π –ü—É—Å—Ç")
        return

    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å",
        reply_markup=get_inline_wishes_list(gifts),
    )


async def get_price_chat(message: Message, bot: Bot, state: FSMContext):

    await state.update_data(price = message.text)
    await message.answer(text = """
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ: –¥–µ–Ω—å, –º–µ—Å—Ç–æ –∏–ª–∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–∏. –ú–æ–∂–µ—Ç–µ —Ç—É—Ç –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß—Ç–æ –º–æ–∂–Ω–æ, –∞ —á—Ç–æ –Ω–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å. –ò –ø—Ä–æ—á–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã.

(–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel)
"""
    )
    await state.set_state(StepsForm.GET_additional_description_chat)


async def get_description_chat(message: Message, bot: Bot, state: FSMContext):
    organizer = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    await state.update_data(desc=message.text)

    context_data = await state.get_data()
    price = context_data.get("price")
    desc = context_data.get("desc")

    await state.clear()


    chat_id = message.chat.id
    users = await get_chat_participants(async_session_maker, message.chat.id)

    usernames = [
        (await bot.get_chat_member(message.chat.id, participant.tg_user_id)).user
        for participant in users
    ]
    usernames_text = "\n".join(
        [
            f"<a href='tg://user?id={participant.id}'>{hbold(participant.first_name)}</a>"
            for participant in usernames
        ]
    )
    

    await message.reply_animation(
        animation="CgACAgIAAxkBAAMuZYEeFYJputUAAVSbkP30lPZANsAhAAJuKQAChzHQS600eUKFozYHMwQ",
        caption=f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n{hbold('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä')}: {organizer}\n{hbold('–ë—é–¥–∂–µ—Ç:')} {price}\n{hbold('–ü—Ä–∞–≤–∏–ª–∞ –ì—Ä—É–ø–ø—ã:')} {hitalic(desc)}\n\n{hbold('–£—á–∞—Ç—Å–Ω–∏–∫–∏:')}\n{usernames_text}\n\n–í—Å–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤—ã—Å–ª–∞–Ω—ã –∏–º–µ–Ω–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∞—à–∏—Ö –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n\n–í–µ—Å–µ–ª–æ–π –≤—Å–µ–º –∏–≥—Ä—ã",
    )

    shuffle_users = arrange_secret_santa(users)

    for giver, receiver in shuffle_users.items():
        tg_user = (await bot.get_chat_member(chat_id, receiver.tg_user_id)).user

        msg = await bot.send_message(
            giver.tg_user_id,
            text=f"""
–ü—Ä–∏–≤–µ—Ç –°–∞–Ω—Ç–∞\n–¢–≤–æ–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –±—É–¥–µ—Ç \n\n<span class='tg-spoiler'>{hbold(tg_user.first_name)} {'@'+tg_user.username if tg_user.username else ''}</span>

{hbold('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä')}: {organizer}
{hbold('–ë—é–¥–∂–µ—Ç')}: {price}
{hbold('–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:')} {desc if desc else "–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç"}
""",
            parse_mode="html",
        )

        await bot.pin_chat_message(chat_id = giver.tg_user_id, message_id=msg.message_id)

        wishes = await get_user_wishes(async_session_maker, receiver.tg_user_id)
        
        if len(wishes) != 0:
            wishes_text = f"–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å <a href='tg://user?id={tg_user.id}'>{tg_user.first_name}</a>\n"
            index = 1
            for wish in wishes:
                if wish.is_gift_received:
                    continue
                
                wishes_text += f"""
{index})\t–ù–∞–∑–≤–∞–Ω–∏–µ: {wish.title}
\t\t\t\t\t–û–ø–∏—Å–∞–Ω–∏–µ: {wish.description}
"""
                index += 1
            if index == 1:
                await bot.send_message(
                    receiver.tg_user_id,
                    text=f"–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫\n–í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª"
                )
            else:
                await bot.send_message(
                    giver.tg_user_id,
                    text=wishes_text,
                    reply_markup=create_inline_wish_buttons(wishes),
                )
        else:
            await bot.send_message(
                receiver.tg_user_id,
                text=f"–¢—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª(–∞) —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª(–∞) –±—ã –ø–æ–ª—É—á–∏—Ç—å\n–¢–≤–æ–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–µ–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ \n–ú–æ–∂–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /update_wish_list",
            )

        await arrange_all_giver_receiver(
            async_session_maker,
            giver.tg_user_id,
            receiver.tg_user_id,
            message.chat.id,
        )